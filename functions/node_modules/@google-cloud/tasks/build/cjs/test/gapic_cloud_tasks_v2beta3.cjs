"use strict";

var protos = _interopRequireWildcard(require("../../protos/protos.cjs"));
var _assert = _interopRequireDefault(require("assert"));
var sinon = _interopRequireWildcard(require("sinon"));
var _mocha = require("mocha");
var cloudtasksModule = _interopRequireWildcard(require("../src/index.cjs"));
var _stream = require("stream");
var _googleGax = require("google-gax");
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var _url = require("url");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, "default": e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t7 in e) "default" !== _t7 && {}.hasOwnProperty.call(e, _t7) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t7)) && (i.get || i.set) ? o(f, _t7, i) : f[_t7] = e[_t7]); return f; })(e, t); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _asyncIterator(r) { var n, t, o, e = 2; for ("undefined" != typeof Symbol && (t = Symbol.asyncIterator, o = Symbol.iterator); e--;) { if (t && null != (n = r[t])) return n.call(r); if (o && null != (n = r[o])) return new AsyncFromSyncIterator(n.call(r)); t = "@@asyncIterator", o = "@@iterator"; } throw new TypeError("Object is not async iterable"); }
function AsyncFromSyncIterator(r) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + " is not an object.")); var n = r.done; return Promise.resolve(r.value).then(function (r) { return { value: r, done: n }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(r) { this.s = r, this.n = r.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, "return": function _return(r) { var n = this.s["return"]; return void 0 === n ? Promise.resolve({ value: r, done: !0 }) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments)); }, "throw": function _throw(r) { var n = this.s["return"]; return void 0 === n ? Promise.reject(r) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(r); } // Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
// @ts-ignore
// @ts-ignore
var dirname = __dirname;
// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
var root = _googleGax.protobuf.Root.fromJSON(JSON.parse(_fs["default"].readFileSync(_path["default"].join(dirname, '..', '..', 'protos/protos.json'), 'utf8')));

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName, fields) {
  var _type$fields$fields$d, _type;
  var type = root.lookupType(typeName);
  var _iterator7 = _createForOfIteratorHelper(fields.slice(0, -1)),
    _step7;
  try {
    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
      var _type2;
      var field = _step7.value;
      type = (_type2 = type) === null || _type2 === void 0 || (_type2 = _type2.fields[field]) === null || _type2 === void 0 ? void 0 : _type2.resolvedType;
    }
  } catch (err) {
    _iterator7.e(err);
  } finally {
    _iterator7.f();
  }
  return (_type$fields$fields$d = (_type = type) === null || _type === void 0 || (_type = _type.fields[fields[fields.length - 1]]) === null || _type === void 0 ? void 0 : _type.defaultValue) !== null && _type$fields$fields$d !== void 0 ? _type$fields$fields$d : null;
}
function generateSampleMessage(instance) {
  var filledObject = instance.constructor.toObject(instance, {
    defaults: true
  });
  return instance.constructor.fromObject(filledObject);
}
function stubSimpleCall(response, error) {
  return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}
function stubSimpleCallWithCallback(response, error) {
  return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}
function stubPageStreamingCall(responses, error) {
  var pagingStub = sinon.stub();
  if (responses) {
    for (var i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  var transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
  var mockStream = new _stream.PassThrough({
    objectMode: true,
    transform: transformStub
  });
  // trigger as many responses as needed
  if (responses) {
    for (var _i = 0; _i < responses.length; ++_i) {
      setImmediate(function () {
        mockStream.write({});
      });
    }
    setImmediate(function () {
      mockStream.end();
    });
  } else {
    setImmediate(function () {
      mockStream.write({});
    });
    setImmediate(function () {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}
function stubAsyncIterationCall(responses, error) {
  var counter = 0;
  var asyncIterable = _defineProperty({}, Symbol.asyncIterator, function () {
    return {
      next: function next() {
        return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
          return _regenerator().w(function (_context) {
            while (1) switch (_context.n) {
              case 0:
                if (!error) {
                  _context.n = 1;
                  break;
                }
                return _context.a(2, Promise.reject(error));
              case 1:
                if (!(counter >= responses.length)) {
                  _context.n = 2;
                  break;
                }
                return _context.a(2, Promise.resolve({
                  done: true,
                  value: undefined
                }));
              case 2:
                return _context.a(2, Promise.resolve({
                  done: false,
                  value: responses[counter++]
                }));
            }
          }, _callee);
        }))();
      }
    };
  });
  return sinon.stub().returns(asyncIterable);
}
(0, _mocha.describe)('v2beta3.CloudTasksClient', function () {
  (0, _mocha.describe)('Common methods', function () {
    (0, _mocha.it)('has apiEndpoint', function () {
      var client = new cloudtasksModule.v2beta3.CloudTasksClient();
      var apiEndpoint = client.apiEndpoint;
      _assert["default"].strictEqual(apiEndpoint, 'cloudtasks.googleapis.com');
    });
    (0, _mocha.it)('has universeDomain', function () {
      var client = new cloudtasksModule.v2beta3.CloudTasksClient();
      var universeDomain = client.universeDomain;
      _assert["default"].strictEqual(universeDomain, "googleapis.com");
    });
    if ((typeof process === "undefined" ? "undefined" : _typeof(process)) === 'object' && typeof process.emitWarning === 'function') {
      (0, _mocha.it)('throws DeprecationWarning if static servicePath is used', function () {
        var stub = sinon.stub(process, 'emitWarning');
        var servicePath = cloudtasksModule.v2beta3.CloudTasksClient.servicePath;
        _assert["default"].strictEqual(servicePath, 'cloudtasks.googleapis.com');
        (0, _assert["default"])(stub.called);
        stub.restore();
      });
      (0, _mocha.it)('throws DeprecationWarning if static apiEndpoint is used', function () {
        var stub = sinon.stub(process, 'emitWarning');
        var apiEndpoint = cloudtasksModule.v2beta3.CloudTasksClient.apiEndpoint;
        _assert["default"].strictEqual(apiEndpoint, 'cloudtasks.googleapis.com');
        (0, _assert["default"])(stub.called);
        stub.restore();
      });
    }
    (0, _mocha.it)('sets apiEndpoint according to universe domain camelCase', function () {
      var client = new cloudtasksModule.v2beta3.CloudTasksClient({
        universeDomain: 'example.com'
      });
      var servicePath = client.apiEndpoint;
      _assert["default"].strictEqual(servicePath, 'cloudtasks.example.com');
    });
    (0, _mocha.it)('sets apiEndpoint according to universe domain snakeCase', function () {
      var client = new cloudtasksModule.v2beta3.CloudTasksClient({
        universe_domain: 'example.com'
      });
      var servicePath = client.apiEndpoint;
      _assert["default"].strictEqual(servicePath, 'cloudtasks.example.com');
    });
    if ((typeof process === "undefined" ? "undefined" : _typeof(process)) === 'object' && 'env' in process) {
      (0, _mocha.describe)('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', function () {
        (0, _mocha.it)('sets apiEndpoint from environment variable', function () {
          var saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          var client = new cloudtasksModule.v2beta3.CloudTasksClient();
          var servicePath = client.apiEndpoint;
          _assert["default"].strictEqual(servicePath, 'cloudtasks.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
        (0, _mocha.it)('value configured in code has priority over environment variable', function () {
          var saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          var client = new cloudtasksModule.v2beta3.CloudTasksClient({
            universeDomain: 'configured.example.com'
          });
          var servicePath = client.apiEndpoint;
          _assert["default"].strictEqual(servicePath, 'cloudtasks.configured.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
      });
    }
    (0, _mocha.it)('does not allow setting both universeDomain and universe_domain', function () {
      _assert["default"]["throws"](function () {
        new cloudtasksModule.v2beta3.CloudTasksClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net'
        });
      });
    });
    (0, _mocha.it)('has port', function () {
      var port = cloudtasksModule.v2beta3.CloudTasksClient.port;
      (0, _assert["default"])(port);
      (0, _assert["default"])(typeof port === 'number');
    });
    (0, _mocha.it)('should create a client with no option', function () {
      var client = new cloudtasksModule.v2beta3.CloudTasksClient();
      (0, _assert["default"])(client);
    });
    (0, _mocha.it)('should create a client with gRPC fallback', function () {
      var client = new cloudtasksModule.v2beta3.CloudTasksClient({
        fallback: true
      });
      (0, _assert["default"])(client);
    });
    (0, _mocha.it)('has initialize method and supports deferred initialization', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      var client;
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _assert["default"].strictEqual(client.cloudTasksStub, undefined);
            _context2.n = 1;
            return client.initialize();
          case 1:
            (0, _assert["default"])(client.cloudTasksStub);
          case 2:
            return _context2.a(2);
        }
      }, _callee2);
    })));
    (0, _mocha.it)('has close method for the initialized client', function (done) {
      var client = new cloudtasksModule.v2beta3.CloudTasksClient({
        credentials: {
          client_email: 'bogus',
          private_key: 'bogus'
        },
        projectId: 'bogus'
      });
      client.initialize()["catch"](function (err) {
        throw err;
      });
      (0, _assert["default"])(client.cloudTasksStub);
      client.close().then(function () {
        done();
      })["catch"](function (err) {
        throw err;
      });
    });
    (0, _mocha.it)('has close method for the non-initialized client', function (done) {
      var client = new cloudtasksModule.v2beta3.CloudTasksClient({
        credentials: {
          client_email: 'bogus',
          private_key: 'bogus'
        },
        projectId: 'bogus'
      });
      _assert["default"].strictEqual(client.cloudTasksStub, undefined);
      client.close().then(function () {
        done();
      })["catch"](function (err) {
        throw err;
      });
    });
    (0, _mocha.it)('has getProjectId method', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      var fakeProjectId, client, result;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            fakeProjectId = 'fake-project-id';
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            _context3.n = 1;
            return client.getProjectId();
          case 1:
            result = _context3.v;
            _assert["default"].strictEqual(result, fakeProjectId);
            (0, _assert["default"])(client.auth.getProjectId.calledWithExactly());
          case 2:
            return _context3.a(2);
        }
      }, _callee3);
    })));
    (0, _mocha.it)('has getProjectId method with callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      var fakeProjectId, client, promise, result;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            fakeProjectId = 'fake-project-id';
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            promise = new Promise(function (resolve, reject) {
              client.getProjectId(function (err, projectId) {
                if (err) {
                  reject(err);
                } else {
                  resolve(projectId);
                }
              });
            });
            _context4.n = 1;
            return promise;
          case 1:
            result = _context4.v;
            _assert["default"].strictEqual(result, fakeProjectId);
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
  });
  (0, _mocha.describe)('getQueue', function () {
    (0, _mocha.it)('invokes getQueue without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$getQueu, _yield$client$getQueu2, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context5.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.GetQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.GetQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue());
            client.innerApiCalls.getQueue = stubSimpleCall(expectedResponse);
            _context5.n = 2;
            return client.getQueue(request);
          case 2:
            _yield$client$getQueu = _context5.v;
            _yield$client$getQueu2 = _slicedToArray(_yield$client$getQueu, 1);
            response = _yield$client$getQueu2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.getQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.getQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context5.a(2);
        }
      }, _callee5);
    })));
    (0, _mocha.it)('invokes getQueue without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context6) {
        while (1) switch (_context6.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context6.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.GetQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.GetQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue());
            client.innerApiCalls.getQueue = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.getQueue(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context6.n = 2;
            return promise;
          case 2:
            response = _context6.v;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.getQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.getQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context6.a(2);
        }
      }, _callee6);
    })));
    (0, _mocha.it)('invokes getQueue with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context7) {
        while (1) switch (_context7.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context7.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.GetQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.GetQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.getQueue = stubSimpleCall(undefined, expectedError);
            _context7.n = 2;
            return _assert["default"].rejects(client.getQueue(request), expectedError);
          case 2:
            actualRequest = client.innerApiCalls.getQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.getQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context7.a(2);
        }
      }, _callee7);
    })));
    (0, _mocha.it)('invokes getQueue with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8() {
      var client, request, defaultValue1, expectedError;
      return _regenerator().w(function (_context8) {
        while (1) switch (_context8.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context8.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.GetQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.GetQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close()["catch"](function (err) {
              throw err;
            });
            _context8.n = 2;
            return _assert["default"].rejects(client.getQueue(request), expectedError);
          case 2:
            return _context8.a(2);
        }
      }, _callee8);
    })));
  });
  (0, _mocha.describe)('createQueue', function () {
    (0, _mocha.it)('invokes createQueue without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$createQ, _yield$client$createQ2, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context9) {
        while (1) switch (_context9.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context9.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.CreateQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.CreateQueueRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue());
            client.innerApiCalls.createQueue = stubSimpleCall(expectedResponse);
            _context9.n = 2;
            return client.createQueue(request);
          case 2:
            _yield$client$createQ = _context9.v;
            _yield$client$createQ2 = _slicedToArray(_yield$client$createQ, 1);
            response = _yield$client$createQ2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.createQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.createQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context9.a(2);
        }
      }, _callee9);
    })));
    (0, _mocha.it)('invokes createQueue without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context0) {
        while (1) switch (_context0.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context0.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.CreateQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.CreateQueueRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue());
            client.innerApiCalls.createQueue = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.createQueue(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context0.n = 2;
            return promise;
          case 2:
            response = _context0.v;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.createQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.createQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context0.a(2);
        }
      }, _callee0);
    })));
    (0, _mocha.it)('invokes createQueue with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee1() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context1) {
        while (1) switch (_context1.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context1.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.CreateQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.CreateQueueRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.createQueue = stubSimpleCall(undefined, expectedError);
            _context1.n = 2;
            return _assert["default"].rejects(client.createQueue(request), expectedError);
          case 2:
            actualRequest = client.innerApiCalls.createQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.createQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context1.a(2);
        }
      }, _callee1);
    })));
    (0, _mocha.it)('invokes createQueue with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee10() {
      var client, request, defaultValue1, expectedError;
      return _regenerator().w(function (_context10) {
        while (1) switch (_context10.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context10.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.CreateQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.CreateQueueRequest', ['parent']);
            request.parent = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close()["catch"](function (err) {
              throw err;
            });
            _context10.n = 2;
            return _assert["default"].rejects(client.createQueue(request), expectedError);
          case 2:
            return _context10.a(2);
        }
      }, _callee10);
    })));
  });
  (0, _mocha.describe)('updateQueue', function () {
    (0, _mocha.it)('invokes updateQueue without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee11() {
      var _request$queue;
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$updateQ, _yield$client$updateQ2, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context11) {
        while (1) switch (_context11.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context11.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.UpdateQueueRequest());
            (_request$queue = request.queue) !== null && _request$queue !== void 0 ? _request$queue : request.queue = {};
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.UpdateQueueRequest', ['queue', 'name']);
            request.queue.name = defaultValue1;
            expectedHeaderRequestParams = "queue.name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue());
            client.innerApiCalls.updateQueue = stubSimpleCall(expectedResponse);
            _context11.n = 2;
            return client.updateQueue(request);
          case 2:
            _yield$client$updateQ = _context11.v;
            _yield$client$updateQ2 = _slicedToArray(_yield$client$updateQ, 1);
            response = _yield$client$updateQ2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.updateQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.updateQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context11.a(2);
        }
      }, _callee11);
    })));
    (0, _mocha.it)('invokes updateQueue without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee12() {
      var _request$queue2;
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context12) {
        while (1) switch (_context12.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context12.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.UpdateQueueRequest());
            (_request$queue2 = request.queue) !== null && _request$queue2 !== void 0 ? _request$queue2 : request.queue = {};
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.UpdateQueueRequest', ['queue', 'name']);
            request.queue.name = defaultValue1;
            expectedHeaderRequestParams = "queue.name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue());
            client.innerApiCalls.updateQueue = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.updateQueue(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context12.n = 2;
            return promise;
          case 2:
            response = _context12.v;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.updateQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.updateQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context12.a(2);
        }
      }, _callee12);
    })));
    (0, _mocha.it)('invokes updateQueue with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee13() {
      var _request$queue3;
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context13) {
        while (1) switch (_context13.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context13.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.UpdateQueueRequest());
            (_request$queue3 = request.queue) !== null && _request$queue3 !== void 0 ? _request$queue3 : request.queue = {};
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.UpdateQueueRequest', ['queue', 'name']);
            request.queue.name = defaultValue1;
            expectedHeaderRequestParams = "queue.name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.updateQueue = stubSimpleCall(undefined, expectedError);
            _context13.n = 2;
            return _assert["default"].rejects(client.updateQueue(request), expectedError);
          case 2:
            actualRequest = client.innerApiCalls.updateQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.updateQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context13.a(2);
        }
      }, _callee13);
    })));
    (0, _mocha.it)('invokes updateQueue with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee14() {
      var _request$queue4;
      var client, request, defaultValue1, expectedError;
      return _regenerator().w(function (_context14) {
        while (1) switch (_context14.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context14.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.UpdateQueueRequest());
            (_request$queue4 = request.queue) !== null && _request$queue4 !== void 0 ? _request$queue4 : request.queue = {};
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.UpdateQueueRequest', ['queue', 'name']);
            request.queue.name = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close()["catch"](function (err) {
              throw err;
            });
            _context14.n = 2;
            return _assert["default"].rejects(client.updateQueue(request), expectedError);
          case 2:
            return _context14.a(2);
        }
      }, _callee14);
    })));
  });
  (0, _mocha.describe)('deleteQueue', function () {
    (0, _mocha.it)('invokes deleteQueue without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee15() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$deleteQ, _yield$client$deleteQ2, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context15) {
        while (1) switch (_context15.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context15.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.DeleteQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.DeleteQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteQueue = stubSimpleCall(expectedResponse);
            _context15.n = 2;
            return client.deleteQueue(request);
          case 2:
            _yield$client$deleteQ = _context15.v;
            _yield$client$deleteQ2 = _slicedToArray(_yield$client$deleteQ, 1);
            response = _yield$client$deleteQ2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.deleteQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.deleteQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context15.a(2);
        }
      }, _callee15);
    })));
    (0, _mocha.it)('invokes deleteQueue without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee16() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context16) {
        while (1) switch (_context16.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context16.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.DeleteQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.DeleteQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteQueue = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.deleteQueue(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context16.n = 2;
            return promise;
          case 2:
            response = _context16.v;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.deleteQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.deleteQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context16.a(2);
        }
      }, _callee16);
    })));
    (0, _mocha.it)('invokes deleteQueue with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee17() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context17) {
        while (1) switch (_context17.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context17.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.DeleteQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.DeleteQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.deleteQueue = stubSimpleCall(undefined, expectedError);
            _context17.n = 2;
            return _assert["default"].rejects(client.deleteQueue(request), expectedError);
          case 2:
            actualRequest = client.innerApiCalls.deleteQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.deleteQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context17.a(2);
        }
      }, _callee17);
    })));
    (0, _mocha.it)('invokes deleteQueue with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee18() {
      var client, request, defaultValue1, expectedError;
      return _regenerator().w(function (_context18) {
        while (1) switch (_context18.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context18.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.DeleteQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.DeleteQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close()["catch"](function (err) {
              throw err;
            });
            _context18.n = 2;
            return _assert["default"].rejects(client.deleteQueue(request), expectedError);
          case 2:
            return _context18.a(2);
        }
      }, _callee18);
    })));
  });
  (0, _mocha.describe)('purgeQueue', function () {
    (0, _mocha.it)('invokes purgeQueue without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee19() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$purgeQu, _yield$client$purgeQu2, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context19) {
        while (1) switch (_context19.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context19.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.PurgeQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.PurgeQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue());
            client.innerApiCalls.purgeQueue = stubSimpleCall(expectedResponse);
            _context19.n = 2;
            return client.purgeQueue(request);
          case 2:
            _yield$client$purgeQu = _context19.v;
            _yield$client$purgeQu2 = _slicedToArray(_yield$client$purgeQu, 1);
            response = _yield$client$purgeQu2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.purgeQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.purgeQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context19.a(2);
        }
      }, _callee19);
    })));
    (0, _mocha.it)('invokes purgeQueue without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee20() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context20) {
        while (1) switch (_context20.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context20.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.PurgeQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.PurgeQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue());
            client.innerApiCalls.purgeQueue = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.purgeQueue(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context20.n = 2;
            return promise;
          case 2:
            response = _context20.v;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.purgeQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.purgeQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context20.a(2);
        }
      }, _callee20);
    })));
    (0, _mocha.it)('invokes purgeQueue with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee21() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context21) {
        while (1) switch (_context21.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context21.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.PurgeQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.PurgeQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.purgeQueue = stubSimpleCall(undefined, expectedError);
            _context21.n = 2;
            return _assert["default"].rejects(client.purgeQueue(request), expectedError);
          case 2:
            actualRequest = client.innerApiCalls.purgeQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.purgeQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context21.a(2);
        }
      }, _callee21);
    })));
    (0, _mocha.it)('invokes purgeQueue with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee22() {
      var client, request, defaultValue1, expectedError;
      return _regenerator().w(function (_context22) {
        while (1) switch (_context22.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context22.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.PurgeQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.PurgeQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close()["catch"](function (err) {
              throw err;
            });
            _context22.n = 2;
            return _assert["default"].rejects(client.purgeQueue(request), expectedError);
          case 2:
            return _context22.a(2);
        }
      }, _callee22);
    })));
  });
  (0, _mocha.describe)('pauseQueue', function () {
    (0, _mocha.it)('invokes pauseQueue without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee23() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$pauseQu, _yield$client$pauseQu2, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context23) {
        while (1) switch (_context23.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context23.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.PauseQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.PauseQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue());
            client.innerApiCalls.pauseQueue = stubSimpleCall(expectedResponse);
            _context23.n = 2;
            return client.pauseQueue(request);
          case 2:
            _yield$client$pauseQu = _context23.v;
            _yield$client$pauseQu2 = _slicedToArray(_yield$client$pauseQu, 1);
            response = _yield$client$pauseQu2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.pauseQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.pauseQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context23.a(2);
        }
      }, _callee23);
    })));
    (0, _mocha.it)('invokes pauseQueue without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee24() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context24) {
        while (1) switch (_context24.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context24.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.PauseQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.PauseQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue());
            client.innerApiCalls.pauseQueue = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.pauseQueue(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context24.n = 2;
            return promise;
          case 2:
            response = _context24.v;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.pauseQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.pauseQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context24.a(2);
        }
      }, _callee24);
    })));
    (0, _mocha.it)('invokes pauseQueue with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee25() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context25) {
        while (1) switch (_context25.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context25.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.PauseQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.PauseQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.pauseQueue = stubSimpleCall(undefined, expectedError);
            _context25.n = 2;
            return _assert["default"].rejects(client.pauseQueue(request), expectedError);
          case 2:
            actualRequest = client.innerApiCalls.pauseQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.pauseQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context25.a(2);
        }
      }, _callee25);
    })));
    (0, _mocha.it)('invokes pauseQueue with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee26() {
      var client, request, defaultValue1, expectedError;
      return _regenerator().w(function (_context26) {
        while (1) switch (_context26.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context26.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.PauseQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.PauseQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close()["catch"](function (err) {
              throw err;
            });
            _context26.n = 2;
            return _assert["default"].rejects(client.pauseQueue(request), expectedError);
          case 2:
            return _context26.a(2);
        }
      }, _callee26);
    })));
  });
  (0, _mocha.describe)('resumeQueue', function () {
    (0, _mocha.it)('invokes resumeQueue without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee27() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$resumeQ, _yield$client$resumeQ2, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context27) {
        while (1) switch (_context27.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context27.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.ResumeQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.ResumeQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue());
            client.innerApiCalls.resumeQueue = stubSimpleCall(expectedResponse);
            _context27.n = 2;
            return client.resumeQueue(request);
          case 2:
            _yield$client$resumeQ = _context27.v;
            _yield$client$resumeQ2 = _slicedToArray(_yield$client$resumeQ, 1);
            response = _yield$client$resumeQ2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.resumeQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.resumeQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context27.a(2);
        }
      }, _callee27);
    })));
    (0, _mocha.it)('invokes resumeQueue without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee28() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context28) {
        while (1) switch (_context28.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context28.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.ResumeQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.ResumeQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue());
            client.innerApiCalls.resumeQueue = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.resumeQueue(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context28.n = 2;
            return promise;
          case 2:
            response = _context28.v;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.resumeQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.resumeQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context28.a(2);
        }
      }, _callee28);
    })));
    (0, _mocha.it)('invokes resumeQueue with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee29() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context29) {
        while (1) switch (_context29.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context29.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.ResumeQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.ResumeQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.resumeQueue = stubSimpleCall(undefined, expectedError);
            _context29.n = 2;
            return _assert["default"].rejects(client.resumeQueue(request), expectedError);
          case 2:
            actualRequest = client.innerApiCalls.resumeQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.resumeQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context29.a(2);
        }
      }, _callee29);
    })));
    (0, _mocha.it)('invokes resumeQueue with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee30() {
      var client, request, defaultValue1, expectedError;
      return _regenerator().w(function (_context30) {
        while (1) switch (_context30.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context30.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.ResumeQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.ResumeQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close()["catch"](function (err) {
              throw err;
            });
            _context30.n = 2;
            return _assert["default"].rejects(client.resumeQueue(request), expectedError);
          case 2:
            return _context30.a(2);
        }
      }, _callee30);
    })));
  });
  (0, _mocha.describe)('getIamPolicy', function () {
    (0, _mocha.it)('invokes getIamPolicy without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee31() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$getIamP, _yield$client$getIamP2, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context31) {
        while (1) switch (_context31.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context31.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.GetIamPolicyRequest', ['resource']);
            request.resource = defaultValue1;
            expectedHeaderRequestParams = "resource=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.getIamPolicy = stubSimpleCall(expectedResponse);
            _context31.n = 2;
            return client.getIamPolicy(request);
          case 2:
            _yield$client$getIamP = _context31.v;
            _yield$client$getIamP2 = _slicedToArray(_yield$client$getIamP, 1);
            response = _yield$client$getIamP2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.getIamPolicy.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.getIamPolicy.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context31.a(2);
        }
      }, _callee31);
    })));
    (0, _mocha.it)('invokes getIamPolicy without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee32() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context32) {
        while (1) switch (_context32.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context32.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.GetIamPolicyRequest', ['resource']);
            request.resource = defaultValue1;
            expectedHeaderRequestParams = "resource=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.getIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.getIamPolicy(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context32.n = 2;
            return promise;
          case 2:
            response = _context32.v;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.getIamPolicy.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.getIamPolicy.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context32.a(2);
        }
      }, _callee32);
    })));
    (0, _mocha.it)('invokes getIamPolicy with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee33() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context33) {
        while (1) switch (_context33.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context33.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.GetIamPolicyRequest', ['resource']);
            request.resource = defaultValue1;
            expectedHeaderRequestParams = "resource=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.getIamPolicy = stubSimpleCall(undefined, expectedError);
            _context33.n = 2;
            return _assert["default"].rejects(client.getIamPolicy(request), expectedError);
          case 2:
            actualRequest = client.innerApiCalls.getIamPolicy.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.getIamPolicy.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context33.a(2);
        }
      }, _callee33);
    })));
    (0, _mocha.it)('invokes getIamPolicy with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee34() {
      var client, request, defaultValue1, expectedError;
      return _regenerator().w(function (_context34) {
        while (1) switch (_context34.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context34.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.GetIamPolicyRequest', ['resource']);
            request.resource = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close()["catch"](function (err) {
              throw err;
            });
            _context34.n = 2;
            return _assert["default"].rejects(client.getIamPolicy(request), expectedError);
          case 2:
            return _context34.a(2);
        }
      }, _callee34);
    })));
  });
  (0, _mocha.describe)('setIamPolicy', function () {
    (0, _mocha.it)('invokes setIamPolicy without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee35() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$setIamP, _yield$client$setIamP2, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context35) {
        while (1) switch (_context35.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context35.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.SetIamPolicyRequest', ['resource']);
            request.resource = defaultValue1;
            expectedHeaderRequestParams = "resource=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.setIamPolicy = stubSimpleCall(expectedResponse);
            _context35.n = 2;
            return client.setIamPolicy(request);
          case 2:
            _yield$client$setIamP = _context35.v;
            _yield$client$setIamP2 = _slicedToArray(_yield$client$setIamP, 1);
            response = _yield$client$setIamP2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.setIamPolicy.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.setIamPolicy.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context35.a(2);
        }
      }, _callee35);
    })));
    (0, _mocha.it)('invokes setIamPolicy without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee36() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context36) {
        while (1) switch (_context36.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context36.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.SetIamPolicyRequest', ['resource']);
            request.resource = defaultValue1;
            expectedHeaderRequestParams = "resource=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.setIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.setIamPolicy(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context36.n = 2;
            return promise;
          case 2:
            response = _context36.v;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.setIamPolicy.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.setIamPolicy.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context36.a(2);
        }
      }, _callee36);
    })));
    (0, _mocha.it)('invokes setIamPolicy with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee37() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context37) {
        while (1) switch (_context37.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context37.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.SetIamPolicyRequest', ['resource']);
            request.resource = defaultValue1;
            expectedHeaderRequestParams = "resource=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.setIamPolicy = stubSimpleCall(undefined, expectedError);
            _context37.n = 2;
            return _assert["default"].rejects(client.setIamPolicy(request), expectedError);
          case 2:
            actualRequest = client.innerApiCalls.setIamPolicy.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.setIamPolicy.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context37.a(2);
        }
      }, _callee37);
    })));
    (0, _mocha.it)('invokes setIamPolicy with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee38() {
      var client, request, defaultValue1, expectedError;
      return _regenerator().w(function (_context38) {
        while (1) switch (_context38.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context38.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.SetIamPolicyRequest', ['resource']);
            request.resource = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close()["catch"](function (err) {
              throw err;
            });
            _context38.n = 2;
            return _assert["default"].rejects(client.setIamPolicy(request), expectedError);
          case 2:
            return _context38.a(2);
        }
      }, _callee38);
    })));
  });
  (0, _mocha.describe)('testIamPermissions', function () {
    (0, _mocha.it)('invokes testIamPermissions without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee39() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$testIam, _yield$client$testIam2, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context39) {
        while (1) switch (_context39.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context39.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.TestIamPermissionsRequest', ['resource']);
            request.resource = defaultValue1;
            expectedHeaderRequestParams = "resource=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsResponse());
            client.innerApiCalls.testIamPermissions = stubSimpleCall(expectedResponse);
            _context39.n = 2;
            return client.testIamPermissions(request);
          case 2:
            _yield$client$testIam = _context39.v;
            _yield$client$testIam2 = _slicedToArray(_yield$client$testIam, 1);
            response = _yield$client$testIam2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.testIamPermissions.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.testIamPermissions.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context39.a(2);
        }
      }, _callee39);
    })));
    (0, _mocha.it)('invokes testIamPermissions without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee40() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context40) {
        while (1) switch (_context40.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context40.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.TestIamPermissionsRequest', ['resource']);
            request.resource = defaultValue1;
            expectedHeaderRequestParams = "resource=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsResponse());
            client.innerApiCalls.testIamPermissions = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.testIamPermissions(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context40.n = 2;
            return promise;
          case 2:
            response = _context40.v;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.testIamPermissions.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.testIamPermissions.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context40.a(2);
        }
      }, _callee40);
    })));
    (0, _mocha.it)('invokes testIamPermissions with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee41() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context41) {
        while (1) switch (_context41.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context41.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.TestIamPermissionsRequest', ['resource']);
            request.resource = defaultValue1;
            expectedHeaderRequestParams = "resource=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.testIamPermissions = stubSimpleCall(undefined, expectedError);
            _context41.n = 2;
            return _assert["default"].rejects(client.testIamPermissions(request), expectedError);
          case 2:
            actualRequest = client.innerApiCalls.testIamPermissions.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.testIamPermissions.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context41.a(2);
        }
      }, _callee41);
    })));
    (0, _mocha.it)('invokes testIamPermissions with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee42() {
      var client, request, defaultValue1, expectedError;
      return _regenerator().w(function (_context42) {
        while (1) switch (_context42.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context42.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.TestIamPermissionsRequest', ['resource']);
            request.resource = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close()["catch"](function (err) {
              throw err;
            });
            _context42.n = 2;
            return _assert["default"].rejects(client.testIamPermissions(request), expectedError);
          case 2:
            return _context42.a(2);
        }
      }, _callee42);
    })));
  });
  (0, _mocha.describe)('getTask', function () {
    (0, _mocha.it)('invokes getTask without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee43() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$getTask, _yield$client$getTask2, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context43) {
        while (1) switch (_context43.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context43.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.GetTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.GetTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Task());
            client.innerApiCalls.getTask = stubSimpleCall(expectedResponse);
            _context43.n = 2;
            return client.getTask(request);
          case 2:
            _yield$client$getTask = _context43.v;
            _yield$client$getTask2 = _slicedToArray(_yield$client$getTask, 1);
            response = _yield$client$getTask2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.getTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.getTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context43.a(2);
        }
      }, _callee43);
    })));
    (0, _mocha.it)('invokes getTask without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee44() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context44) {
        while (1) switch (_context44.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context44.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.GetTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.GetTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Task());
            client.innerApiCalls.getTask = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.getTask(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context44.n = 2;
            return promise;
          case 2:
            response = _context44.v;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.getTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.getTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context44.a(2);
        }
      }, _callee44);
    })));
    (0, _mocha.it)('invokes getTask with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee45() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context45) {
        while (1) switch (_context45.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context45.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.GetTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.GetTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.getTask = stubSimpleCall(undefined, expectedError);
            _context45.n = 2;
            return _assert["default"].rejects(client.getTask(request), expectedError);
          case 2:
            actualRequest = client.innerApiCalls.getTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.getTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context45.a(2);
        }
      }, _callee45);
    })));
    (0, _mocha.it)('invokes getTask with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee46() {
      var client, request, defaultValue1, expectedError;
      return _regenerator().w(function (_context46) {
        while (1) switch (_context46.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context46.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.GetTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.GetTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close()["catch"](function (err) {
              throw err;
            });
            _context46.n = 2;
            return _assert["default"].rejects(client.getTask(request), expectedError);
          case 2:
            return _context46.a(2);
        }
      }, _callee46);
    })));
  });
  (0, _mocha.describe)('createTask', function () {
    (0, _mocha.it)('invokes createTask without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee47() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$createT, _yield$client$createT2, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context47) {
        while (1) switch (_context47.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context47.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.CreateTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.CreateTaskRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Task());
            client.innerApiCalls.createTask = stubSimpleCall(expectedResponse);
            _context47.n = 2;
            return client.createTask(request);
          case 2:
            _yield$client$createT = _context47.v;
            _yield$client$createT2 = _slicedToArray(_yield$client$createT, 1);
            response = _yield$client$createT2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.createTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.createTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context47.a(2);
        }
      }, _callee47);
    })));
    (0, _mocha.it)('invokes createTask without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee48() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context48) {
        while (1) switch (_context48.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context48.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.CreateTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.CreateTaskRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Task());
            client.innerApiCalls.createTask = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.createTask(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context48.n = 2;
            return promise;
          case 2:
            response = _context48.v;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.createTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.createTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context48.a(2);
        }
      }, _callee48);
    })));
    (0, _mocha.it)('invokes createTask with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee49() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context49) {
        while (1) switch (_context49.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context49.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.CreateTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.CreateTaskRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.createTask = stubSimpleCall(undefined, expectedError);
            _context49.n = 2;
            return _assert["default"].rejects(client.createTask(request), expectedError);
          case 2:
            actualRequest = client.innerApiCalls.createTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.createTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context49.a(2);
        }
      }, _callee49);
    })));
    (0, _mocha.it)('invokes createTask with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee50() {
      var client, request, defaultValue1, expectedError;
      return _regenerator().w(function (_context50) {
        while (1) switch (_context50.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context50.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.CreateTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.CreateTaskRequest', ['parent']);
            request.parent = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close()["catch"](function (err) {
              throw err;
            });
            _context50.n = 2;
            return _assert["default"].rejects(client.createTask(request), expectedError);
          case 2:
            return _context50.a(2);
        }
      }, _callee50);
    })));
  });
  (0, _mocha.describe)('deleteTask', function () {
    (0, _mocha.it)('invokes deleteTask without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee51() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$deleteT, _yield$client$deleteT2, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context51) {
        while (1) switch (_context51.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context51.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.DeleteTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.DeleteTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteTask = stubSimpleCall(expectedResponse);
            _context51.n = 2;
            return client.deleteTask(request);
          case 2:
            _yield$client$deleteT = _context51.v;
            _yield$client$deleteT2 = _slicedToArray(_yield$client$deleteT, 1);
            response = _yield$client$deleteT2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.deleteTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.deleteTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context51.a(2);
        }
      }, _callee51);
    })));
    (0, _mocha.it)('invokes deleteTask without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee52() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context52) {
        while (1) switch (_context52.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context52.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.DeleteTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.DeleteTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteTask = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.deleteTask(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context52.n = 2;
            return promise;
          case 2:
            response = _context52.v;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.deleteTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.deleteTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context52.a(2);
        }
      }, _callee52);
    })));
    (0, _mocha.it)('invokes deleteTask with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee53() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context53) {
        while (1) switch (_context53.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context53.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.DeleteTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.DeleteTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.deleteTask = stubSimpleCall(undefined, expectedError);
            _context53.n = 2;
            return _assert["default"].rejects(client.deleteTask(request), expectedError);
          case 2:
            actualRequest = client.innerApiCalls.deleteTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.deleteTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context53.a(2);
        }
      }, _callee53);
    })));
    (0, _mocha.it)('invokes deleteTask with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee54() {
      var client, request, defaultValue1, expectedError;
      return _regenerator().w(function (_context54) {
        while (1) switch (_context54.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context54.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.DeleteTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.DeleteTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close()["catch"](function (err) {
              throw err;
            });
            _context54.n = 2;
            return _assert["default"].rejects(client.deleteTask(request), expectedError);
          case 2:
            return _context54.a(2);
        }
      }, _callee54);
    })));
  });
  (0, _mocha.describe)('runTask', function () {
    (0, _mocha.it)('invokes runTask without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee55() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$runTask, _yield$client$runTask2, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context55) {
        while (1) switch (_context55.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context55.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.RunTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.RunTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Task());
            client.innerApiCalls.runTask = stubSimpleCall(expectedResponse);
            _context55.n = 2;
            return client.runTask(request);
          case 2:
            _yield$client$runTask = _context55.v;
            _yield$client$runTask2 = _slicedToArray(_yield$client$runTask, 1);
            response = _yield$client$runTask2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.runTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.runTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context55.a(2);
        }
      }, _callee55);
    })));
    (0, _mocha.it)('invokes runTask without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee56() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context56) {
        while (1) switch (_context56.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context56.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.RunTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.RunTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Task());
            client.innerApiCalls.runTask = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.runTask(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context56.n = 2;
            return promise;
          case 2:
            response = _context56.v;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.runTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.runTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context56.a(2);
        }
      }, _callee56);
    })));
    (0, _mocha.it)('invokes runTask with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee57() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context57) {
        while (1) switch (_context57.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context57.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.RunTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.RunTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.runTask = stubSimpleCall(undefined, expectedError);
            _context57.n = 2;
            return _assert["default"].rejects(client.runTask(request), expectedError);
          case 2:
            actualRequest = client.innerApiCalls.runTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.runTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context57.a(2);
        }
      }, _callee57);
    })));
    (0, _mocha.it)('invokes runTask with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee58() {
      var client, request, defaultValue1, expectedError;
      return _regenerator().w(function (_context58) {
        while (1) switch (_context58.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context58.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.RunTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.RunTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close()["catch"](function (err) {
              throw err;
            });
            _context58.n = 2;
            return _assert["default"].rejects(client.runTask(request), expectedError);
          case 2:
            return _context58.a(2);
        }
      }, _callee58);
    })));
  });
  (0, _mocha.describe)('listQueues', function () {
    (0, _mocha.it)('invokes listQueues without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee59() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$listQue, _yield$client$listQue2, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context59) {
        while (1) switch (_context59.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context59.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.ListQueuesRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.ListQueuesRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = [generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue()), generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue()), generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue())];
            client.innerApiCalls.listQueues = stubSimpleCall(expectedResponse);
            _context59.n = 2;
            return client.listQueues(request);
          case 2:
            _yield$client$listQue = _context59.v;
            _yield$client$listQue2 = _slicedToArray(_yield$client$listQue, 1);
            response = _yield$client$listQue2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.listQueues.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.listQueues.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context59.a(2);
        }
      }, _callee59);
    })));
    (0, _mocha.it)('invokes listQueues without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee60() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context60) {
        while (1) switch (_context60.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context60.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.ListQueuesRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.ListQueuesRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = [generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue()), generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue()), generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue())];
            client.innerApiCalls.listQueues = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.listQueues(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context60.n = 2;
            return promise;
          case 2:
            response = _context60.v;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.listQueues.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.listQueues.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context60.a(2);
        }
      }, _callee60);
    })));
    (0, _mocha.it)('invokes listQueues with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee61() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context61) {
        while (1) switch (_context61.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context61.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.ListQueuesRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.ListQueuesRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.listQueues = stubSimpleCall(undefined, expectedError);
            _context61.n = 2;
            return _assert["default"].rejects(client.listQueues(request), expectedError);
          case 2:
            actualRequest = client.innerApiCalls.listQueues.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.listQueues.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context61.a(2);
        }
      }, _callee61);
    })));
    (0, _mocha.it)('invokes listQueuesStream without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee62() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, stream, promise, responses;
      return _regenerator().w(function (_context62) {
        while (1) switch (_context62.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context62.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.ListQueuesRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.ListQueuesRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = [generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue()), generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue()), generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue())];
            client.descriptors.page.listQueues.createStream = stubPageStreamingCall(expectedResponse);
            stream = client.listQueuesStream(request);
            promise = new Promise(function (resolve, reject) {
              var responses = [];
              stream.on('data', function (response) {
                responses.push(response);
              });
              stream.on('end', function () {
                resolve(responses);
              });
              stream.on('error', function (err) {
                reject(err);
              });
            });
            _context62.n = 2;
            return promise;
          case 2:
            responses = _context62.v;
            _assert["default"].deepStrictEqual(responses, expectedResponse);
            (0, _assert["default"])(client.descriptors.page.listQueues.createStream.getCall(0).calledWith(client.innerApiCalls.listQueues, request));
            (0, _assert["default"])(client.descriptors.page.listQueues.createStream.getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
          case 3:
            return _context62.a(2);
        }
      }, _callee62);
    })));
    (0, _mocha.it)('invokes listQueuesStream with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee63() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, stream, promise;
      return _regenerator().w(function (_context63) {
        while (1) switch (_context63.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context63.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.ListQueuesRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.ListQueuesRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.descriptors.page.listQueues.createStream = stubPageStreamingCall(undefined, expectedError);
            stream = client.listQueuesStream(request);
            promise = new Promise(function (resolve, reject) {
              var responses = [];
              stream.on('data', function (response) {
                responses.push(response);
              });
              stream.on('end', function () {
                resolve(responses);
              });
              stream.on('error', function (err) {
                reject(err);
              });
            });
            _context63.n = 2;
            return _assert["default"].rejects(promise, expectedError);
          case 2:
            (0, _assert["default"])(client.descriptors.page.listQueues.createStream.getCall(0).calledWith(client.innerApiCalls.listQueues, request));
            (0, _assert["default"])(client.descriptors.page.listQueues.createStream.getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
          case 3:
            return _context63.a(2);
        }
      }, _callee63);
    })));
    (0, _mocha.it)('uses async iteration with listQueues without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee64() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, responses, iterable, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, resource, _t;
      return _regenerator().w(function (_context64) {
        while (1) switch (_context64.p = _context64.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context64.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.ListQueuesRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.ListQueuesRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = [generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue()), generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue()), generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Queue())];
            client.descriptors.page.listQueues.asyncIterate = stubAsyncIterationCall(expectedResponse);
            responses = [];
            iterable = client.listQueuesAsync(request);
            _iteratorAbruptCompletion = false;
            _didIteratorError = false;
            _context64.p = 2;
            _iterator = _asyncIterator(iterable);
          case 3:
            _context64.n = 4;
            return _iterator.next();
          case 4:
            if (!(_iteratorAbruptCompletion = !(_step = _context64.v).done)) {
              _context64.n = 6;
              break;
            }
            resource = _step.value;
            responses.push(resource);
          case 5:
            _iteratorAbruptCompletion = false;
            _context64.n = 3;
            break;
          case 6:
            _context64.n = 8;
            break;
          case 7:
            _context64.p = 7;
            _t = _context64.v;
            _didIteratorError = true;
            _iteratorError = _t;
          case 8:
            _context64.p = 8;
            _context64.p = 9;
            if (!(_iteratorAbruptCompletion && _iterator["return"] != null)) {
              _context64.n = 10;
              break;
            }
            _context64.n = 10;
            return _iterator["return"]();
          case 10:
            _context64.p = 10;
            if (!_didIteratorError) {
              _context64.n = 11;
              break;
            }
            throw _iteratorError;
          case 11:
            return _context64.f(10);
          case 12:
            return _context64.f(8);
          case 13:
            _assert["default"].deepStrictEqual(responses, expectedResponse);
            _assert["default"].deepStrictEqual(client.descriptors.page.listQueues.asyncIterate.getCall(0).args[1], request);
            (0, _assert["default"])(client.descriptors.page.listQueues.asyncIterate.getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
          case 14:
            return _context64.a(2);
        }
      }, _callee64, null, [[9,, 10, 12], [2, 7, 8, 13]]);
    })));
    (0, _mocha.it)('uses async iteration with listQueues with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee66() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, iterable;
      return _regenerator().w(function (_context66) {
        while (1) switch (_context66.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context66.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.ListQueuesRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.ListQueuesRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.descriptors.page.listQueues.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            iterable = client.listQueuesAsync(request);
            _context66.n = 2;
            return _assert["default"].rejects(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee65() {
              var responses, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, resource, _t2;
              return _regenerator().w(function (_context65) {
                while (1) switch (_context65.p = _context65.n) {
                  case 0:
                    responses = [];
                    _iteratorAbruptCompletion2 = false;
                    _didIteratorError2 = false;
                    _context65.p = 1;
                    _iterator2 = _asyncIterator(iterable);
                  case 2:
                    _context65.n = 3;
                    return _iterator2.next();
                  case 3:
                    if (!(_iteratorAbruptCompletion2 = !(_step2 = _context65.v).done)) {
                      _context65.n = 5;
                      break;
                    }
                    resource = _step2.value;
                    responses.push(resource);
                  case 4:
                    _iteratorAbruptCompletion2 = false;
                    _context65.n = 2;
                    break;
                  case 5:
                    _context65.n = 7;
                    break;
                  case 6:
                    _context65.p = 6;
                    _t2 = _context65.v;
                    _didIteratorError2 = true;
                    _iteratorError2 = _t2;
                  case 7:
                    _context65.p = 7;
                    _context65.p = 8;
                    if (!(_iteratorAbruptCompletion2 && _iterator2["return"] != null)) {
                      _context65.n = 9;
                      break;
                    }
                    _context65.n = 9;
                    return _iterator2["return"]();
                  case 9:
                    _context65.p = 9;
                    if (!_didIteratorError2) {
                      _context65.n = 10;
                      break;
                    }
                    throw _iteratorError2;
                  case 10:
                    return _context65.f(9);
                  case 11:
                    return _context65.f(7);
                  case 12:
                    return _context65.a(2);
                }
              }, _callee65, null, [[8,, 9, 11], [1, 6, 7, 12]]);
            })));
          case 2:
            _assert["default"].deepStrictEqual(client.descriptors.page.listQueues.asyncIterate.getCall(0).args[1], request);
            (0, _assert["default"])(client.descriptors.page.listQueues.asyncIterate.getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
          case 3:
            return _context66.a(2);
        }
      }, _callee66);
    })));
  });
  (0, _mocha.describe)('listTasks', function () {
    (0, _mocha.it)('invokes listTasks without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee67() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$listTas, _yield$client$listTas2, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context67) {
        while (1) switch (_context67.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context67.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.ListTasksRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.ListTasksRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = [generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Task()), generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Task()), generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Task())];
            client.innerApiCalls.listTasks = stubSimpleCall(expectedResponse);
            _context67.n = 2;
            return client.listTasks(request);
          case 2:
            _yield$client$listTas = _context67.v;
            _yield$client$listTas2 = _slicedToArray(_yield$client$listTas, 1);
            response = _yield$client$listTas2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.listTasks.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.listTasks.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context67.a(2);
        }
      }, _callee67);
    })));
    (0, _mocha.it)('invokes listTasks without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee68() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context68) {
        while (1) switch (_context68.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context68.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.ListTasksRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.ListTasksRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = [generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Task()), generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Task()), generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Task())];
            client.innerApiCalls.listTasks = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.listTasks(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context68.n = 2;
            return promise;
          case 2:
            response = _context68.v;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.listTasks.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.listTasks.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context68.a(2);
        }
      }, _callee68);
    })));
    (0, _mocha.it)('invokes listTasks with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee69() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regenerator().w(function (_context69) {
        while (1) switch (_context69.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context69.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.ListTasksRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.ListTasksRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.listTasks = stubSimpleCall(undefined, expectedError);
            _context69.n = 2;
            return _assert["default"].rejects(client.listTasks(request), expectedError);
          case 2:
            actualRequest = client.innerApiCalls.listTasks.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.listTasks.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 3:
            return _context69.a(2);
        }
      }, _callee69);
    })));
    (0, _mocha.it)('invokes listTasksStream without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee70() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, stream, promise, responses;
      return _regenerator().w(function (_context70) {
        while (1) switch (_context70.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context70.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.ListTasksRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.ListTasksRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = [generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Task()), generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Task()), generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Task())];
            client.descriptors.page.listTasks.createStream = stubPageStreamingCall(expectedResponse);
            stream = client.listTasksStream(request);
            promise = new Promise(function (resolve, reject) {
              var responses = [];
              stream.on('data', function (response) {
                responses.push(response);
              });
              stream.on('end', function () {
                resolve(responses);
              });
              stream.on('error', function (err) {
                reject(err);
              });
            });
            _context70.n = 2;
            return promise;
          case 2:
            responses = _context70.v;
            _assert["default"].deepStrictEqual(responses, expectedResponse);
            (0, _assert["default"])(client.descriptors.page.listTasks.createStream.getCall(0).calledWith(client.innerApiCalls.listTasks, request));
            (0, _assert["default"])(client.descriptors.page.listTasks.createStream.getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
          case 3:
            return _context70.a(2);
        }
      }, _callee70);
    })));
    (0, _mocha.it)('invokes listTasksStream with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee71() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, stream, promise;
      return _regenerator().w(function (_context71) {
        while (1) switch (_context71.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context71.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.ListTasksRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.ListTasksRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.descriptors.page.listTasks.createStream = stubPageStreamingCall(undefined, expectedError);
            stream = client.listTasksStream(request);
            promise = new Promise(function (resolve, reject) {
              var responses = [];
              stream.on('data', function (response) {
                responses.push(response);
              });
              stream.on('end', function () {
                resolve(responses);
              });
              stream.on('error', function (err) {
                reject(err);
              });
            });
            _context71.n = 2;
            return _assert["default"].rejects(promise, expectedError);
          case 2:
            (0, _assert["default"])(client.descriptors.page.listTasks.createStream.getCall(0).calledWith(client.innerApiCalls.listTasks, request));
            (0, _assert["default"])(client.descriptors.page.listTasks.createStream.getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
          case 3:
            return _context71.a(2);
        }
      }, _callee71);
    })));
    (0, _mocha.it)('uses async iteration with listTasks without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee72() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, responses, iterable, _iteratorAbruptCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, resource, _t3;
      return _regenerator().w(function (_context72) {
        while (1) switch (_context72.p = _context72.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context72.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.ListTasksRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.ListTasksRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = [generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Task()), generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Task()), generateSampleMessage(new protos.google.cloud.tasks.v2beta3.Task())];
            client.descriptors.page.listTasks.asyncIterate = stubAsyncIterationCall(expectedResponse);
            responses = [];
            iterable = client.listTasksAsync(request);
            _iteratorAbruptCompletion3 = false;
            _didIteratorError3 = false;
            _context72.p = 2;
            _iterator3 = _asyncIterator(iterable);
          case 3:
            _context72.n = 4;
            return _iterator3.next();
          case 4:
            if (!(_iteratorAbruptCompletion3 = !(_step3 = _context72.v).done)) {
              _context72.n = 6;
              break;
            }
            resource = _step3.value;
            responses.push(resource);
          case 5:
            _iteratorAbruptCompletion3 = false;
            _context72.n = 3;
            break;
          case 6:
            _context72.n = 8;
            break;
          case 7:
            _context72.p = 7;
            _t3 = _context72.v;
            _didIteratorError3 = true;
            _iteratorError3 = _t3;
          case 8:
            _context72.p = 8;
            _context72.p = 9;
            if (!(_iteratorAbruptCompletion3 && _iterator3["return"] != null)) {
              _context72.n = 10;
              break;
            }
            _context72.n = 10;
            return _iterator3["return"]();
          case 10:
            _context72.p = 10;
            if (!_didIteratorError3) {
              _context72.n = 11;
              break;
            }
            throw _iteratorError3;
          case 11:
            return _context72.f(10);
          case 12:
            return _context72.f(8);
          case 13:
            _assert["default"].deepStrictEqual(responses, expectedResponse);
            _assert["default"].deepStrictEqual(client.descriptors.page.listTasks.asyncIterate.getCall(0).args[1], request);
            (0, _assert["default"])(client.descriptors.page.listTasks.asyncIterate.getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
          case 14:
            return _context72.a(2);
        }
      }, _callee72, null, [[9,, 10, 12], [2, 7, 8, 13]]);
    })));
    (0, _mocha.it)('uses async iteration with listTasks with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee74() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, iterable;
      return _regenerator().w(function (_context74) {
        while (1) switch (_context74.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context74.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new protos.google.cloud.tasks.v2beta3.ListTasksRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2beta3.ListTasksRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.descriptors.page.listTasks.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            iterable = client.listTasksAsync(request);
            _context74.n = 2;
            return _assert["default"].rejects(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee73() {
              var responses, _iteratorAbruptCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, resource, _t4;
              return _regenerator().w(function (_context73) {
                while (1) switch (_context73.p = _context73.n) {
                  case 0:
                    responses = [];
                    _iteratorAbruptCompletion4 = false;
                    _didIteratorError4 = false;
                    _context73.p = 1;
                    _iterator4 = _asyncIterator(iterable);
                  case 2:
                    _context73.n = 3;
                    return _iterator4.next();
                  case 3:
                    if (!(_iteratorAbruptCompletion4 = !(_step4 = _context73.v).done)) {
                      _context73.n = 5;
                      break;
                    }
                    resource = _step4.value;
                    responses.push(resource);
                  case 4:
                    _iteratorAbruptCompletion4 = false;
                    _context73.n = 2;
                    break;
                  case 5:
                    _context73.n = 7;
                    break;
                  case 6:
                    _context73.p = 6;
                    _t4 = _context73.v;
                    _didIteratorError4 = true;
                    _iteratorError4 = _t4;
                  case 7:
                    _context73.p = 7;
                    _context73.p = 8;
                    if (!(_iteratorAbruptCompletion4 && _iterator4["return"] != null)) {
                      _context73.n = 9;
                      break;
                    }
                    _context73.n = 9;
                    return _iterator4["return"]();
                  case 9:
                    _context73.p = 9;
                    if (!_didIteratorError4) {
                      _context73.n = 10;
                      break;
                    }
                    throw _iteratorError4;
                  case 10:
                    return _context73.f(9);
                  case 11:
                    return _context73.f(7);
                  case 12:
                    return _context73.a(2);
                }
              }, _callee73, null, [[8,, 9, 11], [1, 6, 7, 12]]);
            })));
          case 2:
            _assert["default"].deepStrictEqual(client.descriptors.page.listTasks.asyncIterate.getCall(0).args[1], request);
            (0, _assert["default"])(client.descriptors.page.listTasks.asyncIterate.getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
          case 3:
            return _context74.a(2);
        }
      }, _callee74);
    })));
  });
  (0, _mocha.describe)('getLocation', function () {
    (0, _mocha.it)('invokes getLocation without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee75() {
      var client, request, expectedHeaderRequestParams, expectedOptions, expectedResponse, response;
      return _regenerator().w(function (_context75) {
        while (1) switch (_context75.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context75.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new _googleGax.LocationProtos.google.cloud.location.GetLocationRequest());
            request.name = '';
            expectedHeaderRequestParams = 'name=';
            expectedOptions = {
              otherArgs: {
                headers: {
                  'x-goog-request-params': expectedHeaderRequestParams
                }
              }
            };
            expectedResponse = generateSampleMessage(new _googleGax.LocationProtos.google.cloud.location.Location());
            client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
            _context75.n = 2;
            return client.getLocation(request, expectedOptions);
          case 2:
            response = _context75.v;
            _assert["default"].deepStrictEqual(response, [expectedResponse]);
            (0, _assert["default"])(client.locationsClient.getLocation.getCall(0).calledWith(request, expectedOptions, undefined));
          case 3:
            return _context75.a(2);
        }
      }, _callee75);
    })));
    (0, _mocha.it)('invokes getLocation without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee76() {
      var client, request, expectedHeaderRequestParams, expectedOptions, expectedResponse, promise, response;
      return _regenerator().w(function (_context76) {
        while (1) switch (_context76.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context76.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new _googleGax.LocationProtos.google.cloud.location.GetLocationRequest());
            request.name = '';
            expectedHeaderRequestParams = 'name=';
            expectedOptions = {
              otherArgs: {
                headers: {
                  'x-goog-request-params': expectedHeaderRequestParams
                }
              }
            };
            expectedResponse = generateSampleMessage(new _googleGax.LocationProtos.google.cloud.location.Location());
            client.locationsClient.getLocation = sinon.stub().callsArgWith(2, null, expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.getLocation(request, expectedOptions, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context76.n = 2;
            return promise;
          case 2:
            response = _context76.v;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            (0, _assert["default"])(client.locationsClient.getLocation.getCall(0));
          case 3:
            return _context76.a(2);
        }
      }, _callee76);
    })));
    (0, _mocha.it)('invokes getLocation with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee77() {
      var client, request, expectedHeaderRequestParams, expectedOptions, expectedError;
      return _regenerator().w(function (_context77) {
        while (1) switch (_context77.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context77.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new _googleGax.LocationProtos.google.cloud.location.GetLocationRequest());
            request.name = '';
            expectedHeaderRequestParams = 'name=';
            expectedOptions = {
              otherArgs: {
                headers: {
                  'x-goog-request-params': expectedHeaderRequestParams
                }
              }
            };
            expectedError = new Error('expected');
            client.locationsClient.getLocation = stubSimpleCall(undefined, expectedError);
            _context77.n = 2;
            return _assert["default"].rejects(client.getLocation(request, expectedOptions), expectedError);
          case 2:
            (0, _assert["default"])(client.locationsClient.getLocation.getCall(0).calledWith(request, expectedOptions, undefined));
          case 3:
            return _context77.a(2);
        }
      }, _callee77);
    })));
  });
  (0, _mocha.describe)('listLocationsAsync', function () {
    (0, _mocha.it)('uses async iteration with listLocations without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee78() {
      var client, request, expectedHeaderRequestParams, expectedResponse, responses, iterable, _iteratorAbruptCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, resource, _t5;
      return _regenerator().w(function (_context78) {
        while (1) switch (_context78.p = _context78.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context78.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new _googleGax.LocationProtos.google.cloud.location.ListLocationsRequest());
            request.name = '';
            expectedHeaderRequestParams = 'name=';
            expectedResponse = [generateSampleMessage(new _googleGax.LocationProtos.google.cloud.location.Location()), generateSampleMessage(new _googleGax.LocationProtos.google.cloud.location.Location()), generateSampleMessage(new _googleGax.LocationProtos.google.cloud.location.Location())];
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            responses = [];
            iterable = client.listLocationsAsync(request);
            _iteratorAbruptCompletion5 = false;
            _didIteratorError5 = false;
            _context78.p = 2;
            _iterator5 = _asyncIterator(iterable);
          case 3:
            _context78.n = 4;
            return _iterator5.next();
          case 4:
            if (!(_iteratorAbruptCompletion5 = !(_step5 = _context78.v).done)) {
              _context78.n = 6;
              break;
            }
            resource = _step5.value;
            responses.push(resource);
          case 5:
            _iteratorAbruptCompletion5 = false;
            _context78.n = 3;
            break;
          case 6:
            _context78.n = 8;
            break;
          case 7:
            _context78.p = 7;
            _t5 = _context78.v;
            _didIteratorError5 = true;
            _iteratorError5 = _t5;
          case 8:
            _context78.p = 8;
            _context78.p = 9;
            if (!(_iteratorAbruptCompletion5 && _iterator5["return"] != null)) {
              _context78.n = 10;
              break;
            }
            _context78.n = 10;
            return _iterator5["return"]();
          case 10:
            _context78.p = 10;
            if (!_didIteratorError5) {
              _context78.n = 11;
              break;
            }
            throw _iteratorError5;
          case 11:
            return _context78.f(10);
          case 12:
            return _context78.f(8);
          case 13:
            _assert["default"].deepStrictEqual(responses, expectedResponse);
            _assert["default"].deepStrictEqual(client.locationsClient.descriptors.page.listLocations.asyncIterate.getCall(0).args[1], request);
            (0, _assert["default"])(client.locationsClient.descriptors.page.listLocations.asyncIterate.getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
          case 14:
            return _context78.a(2);
        }
      }, _callee78, null, [[9,, 10, 12], [2, 7, 8, 13]]);
    })));
    (0, _mocha.it)('uses async iteration with listLocations with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee80() {
      var client, request, expectedHeaderRequestParams, expectedError, iterable;
      return _regenerator().w(function (_context80) {
        while (1) switch (_context80.n) {
          case 0:
            client = new cloudtasksModule.v2beta3.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _context80.n = 1;
            return client.initialize();
          case 1:
            request = generateSampleMessage(new _googleGax.LocationProtos.google.cloud.location.ListLocationsRequest());
            request.name = '';
            expectedHeaderRequestParams = 'name=';
            expectedError = new Error('expected');
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            iterable = client.listLocationsAsync(request);
            _context80.n = 2;
            return _assert["default"].rejects(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee79() {
              var responses, _iteratorAbruptCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, resource, _t6;
              return _regenerator().w(function (_context79) {
                while (1) switch (_context79.p = _context79.n) {
                  case 0:
                    responses = [];
                    _iteratorAbruptCompletion6 = false;
                    _didIteratorError6 = false;
                    _context79.p = 1;
                    _iterator6 = _asyncIterator(iterable);
                  case 2:
                    _context79.n = 3;
                    return _iterator6.next();
                  case 3:
                    if (!(_iteratorAbruptCompletion6 = !(_step6 = _context79.v).done)) {
                      _context79.n = 5;
                      break;
                    }
                    resource = _step6.value;
                    responses.push(resource);
                  case 4:
                    _iteratorAbruptCompletion6 = false;
                    _context79.n = 2;
                    break;
                  case 5:
                    _context79.n = 7;
                    break;
                  case 6:
                    _context79.p = 6;
                    _t6 = _context79.v;
                    _didIteratorError6 = true;
                    _iteratorError6 = _t6;
                  case 7:
                    _context79.p = 7;
                    _context79.p = 8;
                    if (!(_iteratorAbruptCompletion6 && _iterator6["return"] != null)) {
                      _context79.n = 9;
                      break;
                    }
                    _context79.n = 9;
                    return _iterator6["return"]();
                  case 9:
                    _context79.p = 9;
                    if (!_didIteratorError6) {
                      _context79.n = 10;
                      break;
                    }
                    throw _iteratorError6;
                  case 10:
                    return _context79.f(9);
                  case 11:
                    return _context79.f(7);
                  case 12:
                    return _context79.a(2);
                }
              }, _callee79, null, [[8,, 9, 11], [1, 6, 7, 12]]);
            })));
          case 2:
            _assert["default"].deepStrictEqual(client.locationsClient.descriptors.page.listLocations.asyncIterate.getCall(0).args[1], request);
            (0, _assert["default"])(client.locationsClient.descriptors.page.listLocations.asyncIterate.getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
          case 3:
            return _context80.a(2);
        }
      }, _callee80);
    })));
  });
  (0, _mocha.describe)('Path templates', function () {
    (0, _mocha.describe)('location', function () {
      var fakePath = "/rendered/path/location";
      var expectedParameters = {
        project: "projectValue",
        location: "locationValue"
      };
      var client = new cloudtasksModule.v2beta3.CloudTasksClient({
        credentials: {
          client_email: 'bogus',
          private_key: 'bogus'
        },
        projectId: 'bogus'
      });
      client.initialize()["catch"](function (err) {
        throw err;
      });
      client.pathTemplates.locationPathTemplate.render = sinon.stub().returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon.stub().returns(expectedParameters);
      (0, _mocha.it)('locationPath', function () {
        var result = client.locationPath("projectValue", "locationValue");
        _assert["default"].strictEqual(result, fakePath);
        (0, _assert["default"])(client.pathTemplates.locationPathTemplate.render.getCall(-1).calledWith(expectedParameters));
      });
      (0, _mocha.it)('matchProjectFromLocationName', function () {
        var result = client.matchProjectFromLocationName(fakePath);
        _assert["default"].strictEqual(result, "projectValue");
        (0, _assert["default"])(client.pathTemplates.locationPathTemplate.match.getCall(-1).calledWith(fakePath));
      });
      (0, _mocha.it)('matchLocationFromLocationName', function () {
        var result = client.matchLocationFromLocationName(fakePath);
        _assert["default"].strictEqual(result, "locationValue");
        (0, _assert["default"])(client.pathTemplates.locationPathTemplate.match.getCall(-1).calledWith(fakePath));
      });
    });
    (0, _mocha.describe)('project', function () {
      var fakePath = "/rendered/path/project";
      var expectedParameters = {
        project: "projectValue"
      };
      var client = new cloudtasksModule.v2beta3.CloudTasksClient({
        credentials: {
          client_email: 'bogus',
          private_key: 'bogus'
        },
        projectId: 'bogus'
      });
      client.initialize()["catch"](function (err) {
        throw err;
      });
      client.pathTemplates.projectPathTemplate.render = sinon.stub().returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon.stub().returns(expectedParameters);
      (0, _mocha.it)('projectPath', function () {
        var result = client.projectPath("projectValue");
        _assert["default"].strictEqual(result, fakePath);
        (0, _assert["default"])(client.pathTemplates.projectPathTemplate.render.getCall(-1).calledWith(expectedParameters));
      });
      (0, _mocha.it)('matchProjectFromProjectName', function () {
        var result = client.matchProjectFromProjectName(fakePath);
        _assert["default"].strictEqual(result, "projectValue");
        (0, _assert["default"])(client.pathTemplates.projectPathTemplate.match.getCall(-1).calledWith(fakePath));
      });
    });
    (0, _mocha.describe)('queue', function () {
      var fakePath = "/rendered/path/queue";
      var expectedParameters = {
        project: "projectValue",
        location: "locationValue",
        queue: "queueValue"
      };
      var client = new cloudtasksModule.v2beta3.CloudTasksClient({
        credentials: {
          client_email: 'bogus',
          private_key: 'bogus'
        },
        projectId: 'bogus'
      });
      client.initialize()["catch"](function (err) {
        throw err;
      });
      client.pathTemplates.queuePathTemplate.render = sinon.stub().returns(fakePath);
      client.pathTemplates.queuePathTemplate.match = sinon.stub().returns(expectedParameters);
      (0, _mocha.it)('queuePath', function () {
        var result = client.queuePath("projectValue", "locationValue", "queueValue");
        _assert["default"].strictEqual(result, fakePath);
        (0, _assert["default"])(client.pathTemplates.queuePathTemplate.render.getCall(-1).calledWith(expectedParameters));
      });
      (0, _mocha.it)('matchProjectFromQueueName', function () {
        var result = client.matchProjectFromQueueName(fakePath);
        _assert["default"].strictEqual(result, "projectValue");
        (0, _assert["default"])(client.pathTemplates.queuePathTemplate.match.getCall(-1).calledWith(fakePath));
      });
      (0, _mocha.it)('matchLocationFromQueueName', function () {
        var result = client.matchLocationFromQueueName(fakePath);
        _assert["default"].strictEqual(result, "locationValue");
        (0, _assert["default"])(client.pathTemplates.queuePathTemplate.match.getCall(-1).calledWith(fakePath));
      });
      (0, _mocha.it)('matchQueueFromQueueName', function () {
        var result = client.matchQueueFromQueueName(fakePath);
        _assert["default"].strictEqual(result, "queueValue");
        (0, _assert["default"])(client.pathTemplates.queuePathTemplate.match.getCall(-1).calledWith(fakePath));
      });
    });
    (0, _mocha.describe)('task', function () {
      var fakePath = "/rendered/path/task";
      var expectedParameters = {
        project: "projectValue",
        location: "locationValue",
        queue: "queueValue",
        task: "taskValue"
      };
      var client = new cloudtasksModule.v2beta3.CloudTasksClient({
        credentials: {
          client_email: 'bogus',
          private_key: 'bogus'
        },
        projectId: 'bogus'
      });
      client.initialize()["catch"](function (err) {
        throw err;
      });
      client.pathTemplates.taskPathTemplate.render = sinon.stub().returns(fakePath);
      client.pathTemplates.taskPathTemplate.match = sinon.stub().returns(expectedParameters);
      (0, _mocha.it)('taskPath', function () {
        var result = client.taskPath("projectValue", "locationValue", "queueValue", "taskValue");
        _assert["default"].strictEqual(result, fakePath);
        (0, _assert["default"])(client.pathTemplates.taskPathTemplate.render.getCall(-1).calledWith(expectedParameters));
      });
      (0, _mocha.it)('matchProjectFromTaskName', function () {
        var result = client.matchProjectFromTaskName(fakePath);
        _assert["default"].strictEqual(result, "projectValue");
        (0, _assert["default"])(client.pathTemplates.taskPathTemplate.match.getCall(-1).calledWith(fakePath));
      });
      (0, _mocha.it)('matchLocationFromTaskName', function () {
        var result = client.matchLocationFromTaskName(fakePath);
        _assert["default"].strictEqual(result, "locationValue");
        (0, _assert["default"])(client.pathTemplates.taskPathTemplate.match.getCall(-1).calledWith(fakePath));
      });
      (0, _mocha.it)('matchQueueFromTaskName', function () {
        var result = client.matchQueueFromTaskName(fakePath);
        _assert["default"].strictEqual(result, "queueValue");
        (0, _assert["default"])(client.pathTemplates.taskPathTemplate.match.getCall(-1).calledWith(fakePath));
      });
      (0, _mocha.it)('matchTaskFromTaskName', function () {
        var result = client.matchTaskFromTaskName(fakePath);
        _assert["default"].strictEqual(result, "taskValue");
        (0, _assert["default"])(client.pathTemplates.taskPathTemplate.match.getCall(-1).calledWith(fakePath));
      });
    });
  });
});