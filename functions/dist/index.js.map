{"version":3,"file":"index.js","mappings":"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","sources":["webpack://functions/external commonjs \"@google-cloud/tasks\"","webpack://functions/external commonjs \"firebase-admin\"","webpack://functions/external commonjs \"firebase-functions\"","webpack://functions/webpack/bootstrap","webpack://functions/./src/index.js"],"sourcesContent":["module.exports = require(\"@google-cloud/tasks\");","module.exports = require(\"firebase-admin\");","module.exports = require(\"firebase-functions\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\n\nconst functions = require(\"firebase-functions\");\nconst admin = require(\"firebase-admin\");\nconst {CloudTasksClient} = require(\"@google-cloud/tasks\");\n\nif (admin.apps.length === 0) {\n  admin.initializeApp();\n}\n\nconst firestore = admin.firestore();\nconst tasksClient = new CloudTasksClient();\n\nconst MAX_BATCH_WRITES = 450;\nconst BATCH_DELAY_MS = 25;\nconst MAX_CHUNK_DOCS = 200000;\nconst MAX_TILES_PER_CHUNK = 16384;\nconst TASK_LOCATION = \"us-west2\";\nconst TASK_QUEUE_NAME = \"BattleDawnPro-SaveMap\";\n\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nasync function ensureQueue(projectId) {\n  const queuePath = tasksClient.queuePath(projectId, TASK_LOCATION, TASK_QUEUE_NAME);\n  const locationPath = tasksClient.locationPath(projectId, TASK_LOCATION);\n  const desiredRateLimits = {\n    maxDispatchesPerSecond: 200,\n    maxConcurrentDispatches: 50\n  };\n\n  try {\n    const [existingQueue] = await tasksClient.getQueue({name: queuePath});\n    const needsUpdate =\n      !existingQueue.rateLimits ||\n      existingQueue.rateLimits.maxDispatchesPerSecond !== desiredRateLimits.maxDispatchesPerSecond ||\n      existingQueue.rateLimits.maxConcurrentDispatches !== desiredRateLimits.maxConcurrentDispatches;\n\n    if (needsUpdate) {\n      await tasksClient.updateQueue({\n        queue: {\n          name: queuePath,\n          rateLimits: desiredRateLimits\n        },\n        updateMask: {\n          paths: [\"rate_limits.max_dispatches_per_second\", \"rate_limits.max_concurrent_dispatches\"]\n        }\n      });\n      functions.logger.info(\"Updated Cloud Tasks queue rate limits\", {queuePath, desiredRateLimits});\n    }\n  } catch (error) {\n    if (error.code === 5) {\n      await tasksClient.createQueue({\n        parent: locationPath,\n        queue: {\n          name: queuePath,\n          rateLimits: desiredRateLimits\n        }\n      });\n      functions.logger.info(\"Created Cloud Tasks queue with custom rate limits\", {queuePath, desiredRateLimits});\n    } else {\n      throw error;\n    }\n  }\n\n  return queuePath;\n}\n\nfunction ensureAuthenticated(context) {\n  if (!context.auth) {\n    throw new functions.https.HttpsError(\"unauthenticated\", \"Authentication is required.\");\n  }\n}\n\nfunction validateChunk(chunk, chunkSize) {\n  if (!chunk || typeof chunk !== \"object\") {\n    throw new functions.https.HttpsError(\"invalid-argument\", \"Each chunk must be an object.\");\n  }\n\n  const { id } = chunk;\n  const tiles = chunk.tiles || chunk.Tiles;\n  if (typeof id !== \"string\" || id.trim().length === 0) {\n    throw new functions.https.HttpsError(\"invalid-argument\", \"Each chunk requires a non-empty string id.\");\n  }\n\n  if (!Array.isArray(tiles)) {\n    throw new functions.https.HttpsError(\"invalid-argument\", `Chunk '${id}' is missing its tiles array.`);\n  }\n\n  if (tiles.length > MAX_TILES_PER_CHUNK) {\n    throw new functions.https.HttpsError(\n      \"invalid-argument\",\n      `Chunk '${id}' exceeds the maximum supported tile count of ${MAX_TILES_PER_CHUNK}.`\n    );\n  }\n\n  for (const tile of tiles) {\n    if (!tile || typeof tile !== \"object\") {\n      throw new functions.https.HttpsError(\"invalid-argument\", `Chunk '${id}' contains an invalid tile payload.`);\n    }\n\n    const x = tile.x ?? tile.X;\n    const y = tile.y ?? tile.Y;\n    const tileName = tile.tileName ?? tile.TileName;\n    const tileObjectPath = tile.tileObjectPath ?? tile.TileObjectPath;\n    const rawLayer = tile.tileLayer ?? tile.TileLayer;\n    const tileLayer = typeof rawLayer === \"string\" && rawLayer.trim().length > 0 ? rawLayer.trim() : \"Overlay\";\n\n    if (typeof x !== \"number\" || typeof y !== \"number\") {\n      throw new functions.https.HttpsError(\"invalid-argument\", `Chunk '${id}' has tiles without numeric coordinates.`);\n    }\n\n    if (typeof tileLayer !== \"string\" || tileLayer.trim().length === 0) {\n      throw new functions.https.HttpsError(\"invalid-argument\", `Chunk '${id}' contains tiles without a tileLayer value.`);\n    }\n\n    if (\n      (tileName !== null && typeof tileName !== \"string\") ||\n      (tileObjectPath !== null && typeof tileObjectPath !== \"string\")\n    ) {\n      throw new functions.https.HttpsError(\n        \"invalid-argument\",\n        `Chunk '${id}' contains tiles with invalid tileName or tileObjectPath values.`\n      );\n    }\n  }\n\n  if (chunkSize && (chunkSize <= 0 || chunkSize > 1024)) {\n    throw new functions.https.HttpsError(\"invalid-argument\", \"chunkSize must be between 1 and 1024.\");\n  }\n}\n\nasync function commitOperationsInBatches(operations, label) {\n  if (!operations.length) {\n    return;\n  }\n\n  let batch = firestore.batch();\n  let writesInBatch = 0;\n  let processed = 0;\n\n  for (const op of operations) {\n    op(batch);\n    writesInBatch += 1;\n    processed += 1;\n\n    if (writesInBatch >= MAX_BATCH_WRITES) {\n      await batch.commit();\n      batch = firestore.batch();\n      writesInBatch = 0;\n      await delay(BATCH_DELAY_MS);\n    }\n\n    if (processed % 250 === 0) {\n      functions.logger.debug(`${label}: committed ${processed}/${operations.length}`);\n    }\n  }\n\n  if (writesInBatch > 0) {\n    await batch.commit();\n  }\n}\n\nexports.saveMap = functions\n  .region(\"us-central1\")\n  .runWith({ timeoutSeconds: 540, memory: \"1GB\" })\n  .https.onCall(async (data, context) => {\n    try {\n      ensureAuthenticated(context);\n\n      if (!data || typeof data !== \"object\") {\n        throw new functions.https.HttpsError(\"invalid-argument\", \"Request payload must be an object.\");\n      }\n\n      const {\n        mapId,\n        planetName,\n        planetSurface,\n        planetSize,\n        chunkSize = 32,\n        tileCount = 0,\n        chunks = [],\n        deleteMissingChunks = true\n      } = data;\n      functions.logger.info(\"saveMap received request\", {\n        mapId,\n        planetSize,\n        chunkSize,\n        tileCount,\n        chunkCount: Array.isArray(chunks) ? chunks.length : undefined,\n        deleteMissingChunks\n      });\n      const chunkIdsOverride = data.chunkIds;\n\n    if (typeof mapId !== \"string\" || mapId.trim().length === 0) {\n      throw new functions.https.HttpsError(\"invalid-argument\", \"mapId must be a non-empty string.\");\n    }\n\n    if (typeof planetSize !== \"number\" || planetSize <= 0 || planetSize > 10000) {\n      throw new functions.https.HttpsError(\"invalid-argument\", \"planetSize must be a positive number (<= 10000).\");\n    }\n\n    if (!Array.isArray(chunks)) {\n      throw new functions.https.HttpsError(\"invalid-argument\", \"chunks must be an array.\");\n    }\n\n    if (chunks.length > MAX_CHUNK_DOCS) {\n      throw new functions.https.HttpsError(\n        \"invalid-argument\",\n        `Too many chunk documents (${chunks.length}). Maximum supported is ${MAX_CHUNK_DOCS}.`\n      );\n    }\n\n      let chunkIdsOverrideSet = null;\n      if (chunkIdsOverride !== undefined) {\n        if (!Array.isArray(chunkIdsOverride)) {\n          throw new functions.https.HttpsError(\"invalid-argument\", \"chunkIds must be an array when provided.\");\n        }\n        chunkIdsOverrideSet = new Set();\n        for (const id of chunkIdsOverride) {\n          if (typeof id !== \"string\" || id.trim().length === 0) {\n            throw new functions.https.HttpsError(\"invalid-argument\", \"chunkIds must contain non-empty strings.\");\n          }\n          chunkIdsOverrideSet.add(id);\n          if (chunkIdsOverrideSet.size > MAX_CHUNK_DOCS) {\n            throw new functions.https.HttpsError(\n              \"invalid-argument\",\n              `Too many chunk ids (${chunkIdsOverrideSet.size}). Maximum supported is ${MAX_CHUNK_DOCS}.`\n            );\n          }\n        }\n      }\n\n    const sanitizedChunks = [];\n    const incomingChunkIds = new Set();\n\n    for (const chunk of chunks) {\n      validateChunk(chunk, chunkSize);\n      if (incomingChunkIds.has(chunk.id)) {\n        throw new functions.https.HttpsError(\"invalid-argument\", `Duplicate chunk id '${chunk.id}'.`);\n      }\n      incomingChunkIds.add(chunk.id);\n      const tilesArray = (chunk.tiles || chunk.Tiles || []).map((tile) => {\n        const x = tile.x ?? tile.X;\n        const y = tile.y ?? tile.Y;\n        const tileName = tile.tileName ?? tile.TileName ?? null;\n        const tileObjectPath = tile.tileObjectPath ?? tile.TileObjectPath ?? null;\n        const rawLayer = tile.tileLayer ?? tile.TileLayer;\n        const layer = typeof rawLayer === \"string\" && rawLayer.trim().length > 0 ? rawLayer.trim() : \"Overlay\";\n        return {\n          x,\n          y,\n          TileName: tileName,\n          TileObjectPath: tileObjectPath,\n          TileLayer: layer\n        };\n      });\n      sanitizedChunks.push({id: chunk.id, tiles: tilesArray});\n    }\n\n    let targetChunkIdSet;\n    if (chunkIdsOverrideSet) {\n      for (const chunkId of incomingChunkIds) {\n        chunkIdsOverrideSet.add(chunkId);\n      }\n      targetChunkIdSet = chunkIdsOverrideSet;\n    } else {\n      targetChunkIdSet = incomingChunkIds;\n    }\n\n    if (targetChunkIdSet.size > MAX_CHUNK_DOCS) {\n      throw new functions.https.HttpsError(\n        \"invalid-argument\",\n        `Too many chunk ids (${targetChunkIdSet.size}). Maximum supported is ${MAX_CHUNK_DOCS}.`\n      );\n    }\n\n    const mapRef = firestore.collection(\"maps\").doc(mapId);\n    const mapDataRef = firestore.collection(\"MapData\").doc(mapId);\n    const chunksCollection = mapDataRef.collection(\"Chunks\");\n\n    const now = admin.firestore.FieldValue.serverTimestamp();\n\n    const projectId = admin.app().options.projectId || process.env.GCLOUD_PROJECT;\n    if (!projectId) {\n      throw new functions.https.HttpsError(\"internal\", \"Unable to determine project id for Cloud Tasks.\");\n    }\n\n    const queuePath = await ensureQueue(projectId);\n    const taskHandlerUrl = `https://${TASK_LOCATION}-${projectId}.cloudfunctions.net/processMapTileTask`;\n    const serviceAccountEmail = `${projectId}@appspot.gserviceaccount.com`;\n\n      const pendingTaskPromises = [];\n      const FLUSH_SIZE = 100;\n      let tasksCreated = 0;\n      let tilesScheduled = 0;\n\n      async function flushPending(reason) {\n        if (!pendingTaskPromises.length) {\n          return;\n        }\n        const count = pendingTaskPromises.length;\n        functions.logger.debug(\"Flushing task batch\", {mapId, count, reason});\n        await Promise.all(pendingTaskPromises);\n        pendingTaskPromises.length = 0;\n      }\n\n    const TILES_PER_TASK = 500;\n\n    for (const {id: chunkId, tiles} of sanitizedChunks) {\n      functions.logger.debug(\"Processing chunk for task creation\", {\n        mapId,\n        chunkId,\n        tileCount: tiles.length\n      });\n\n      if (!tiles.length) {\n        const payload = {mapId, chunkId, chunkSize, tiles: []};\n        pendingTaskPromises.push(\n          tasksClient.createTask({\n            parent: queuePath,\n            task: {\n              httpRequest: {\n                httpMethod: \"POST\",\n                url: taskHandlerUrl,\n                headers: {\"Content-Type\": \"application/json\"},\n                body: Buffer.from(JSON.stringify(payload)).toString(\"base64\"),\n                oidcToken: {serviceAccountEmail}\n              }\n            }\n          }).then(() => {\n            tasksCreated += 1;\n          })\n        );\n        await flushPending(\"emptyChunk\");\n        continue;\n      }\n\n      for (let start = 0; start < tiles.length; start += TILES_PER_TASK) {\n        const slice = tiles.slice(start, start + TILES_PER_TASK);\n        const payload = {\n          mapId,\n          chunkId,\n          chunkSize,\n          tiles: slice\n        };\n\n        const task = {\n          parent: queuePath,\n          task: {\n            httpRequest: {\n              httpMethod: \"POST\",\n              url: taskHandlerUrl,\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: Buffer.from(JSON.stringify(payload)).toString(\"base64\"),\n              oidcToken: {\n                serviceAccountEmail\n              }\n            }\n          }\n        };\n\n        pendingTaskPromises.push(\n          tasksClient.createTask(task).then(() => {\n            tasksCreated += 1;\n            tilesScheduled += slice.length;\n          }).catch((err) => {\n            functions.logger.error(\"Failed to create task\", {\n              mapId,\n              chunkId,\n              tileCount: slice.length,\n              error: err.message\n            });\n            throw err;\n          })\n        );\n        if (pendingTaskPromises.length >= FLUSH_SIZE) {\n          await flushPending(\"flushSizeReached\");\n        }\n      }\n    }\n\n      await flushPending(\"finalize\");\n\n    const shouldPerformDeletes = deleteMissingChunks && chunkIdsOverrideSet !== null;\n    const chunkIds = Array.from(targetChunkIdSet);\n\n    if (shouldPerformDeletes) {\n      const deleteOperations = [];\n      const existingChunkRefs = await chunksCollection.listDocuments();\n      for (const ref of existingChunkRefs) {\n        if (!targetChunkIdSet.has(ref.id)) {\n          deleteOperations.push((batch) => batch.delete(ref));\n        }\n      }\n      await commitOperationsInBatches(deleteOperations, \"deleteChunks\");\n    }\n\n    const mapDocument = {\n      PlanetName: planetName || null,\n      PlanetSurface: planetSurface || null,\n      PlanetSize: planetSize,\n      chunkSize,\n      updatedAt: now\n    };\n\n    const mapDataDocument = {\n      ChunkSize: chunkSize,\n      updatedAt: now\n    };\n\n    const isFinalBatch = chunkIdsOverrideSet !== null;\n    if (isFinalBatch) {\n      mapDocument.tileCount = tileCount;\n      mapDataDocument.ChunkIds = chunkIds;\n      mapDataDocument.TileCount = tileCount;\n    }\n\n    await Promise.all([\n      mapRef.set(mapDocument, {merge: true}),\n      mapDataRef.set(mapDataDocument, {merge: true})\n    ]);\n\n      functions.logger.info(\n        `Queued ${tilesScheduled} tiles across ${tasksCreated} tasks for map '${mapId}' (chunks this batch: ${sanitizedChunks.length}).`,\n        {\n          mapId,\n          tasksCreated,\n          tilesScheduled,\n          chunkBatchSize: sanitizedChunks.length,\n          isFinalBatch,\n          chunkIdsCount: chunkIds.length\n        }\n      );\n\n      return {\n        success: true,\n        mapId,\n        tasksCreated,\n        tilesScheduled,\n        processedChunkIds: sanitizedChunks.map((chunk) => chunk.id),\n        finalBatch: isFinalBatch,\n        queue: queuePath\n      };\n    } catch (err) {\n      const message = err instanceof Error ? err.message : String(err);\n      functions.logger.error(\"saveMap failed\", {\n        mapId: data && typeof data === \"object\" ? data.mapId : undefined,\n        message,\n        stack: err instanceof Error ? err.stack : undefined\n      });\n      if (err instanceof functions.https.HttpsError) {\n        throw err;\n      }\n      throw new functions.https.HttpsError(\"unknown\", message || \"saveMap failed\");\n    }\n  });\n\nexports.processMapTileTask = functions\n  .region(\"us-west2\")\n  .runWith({timeoutSeconds: 120, memory: \"8GB\"})\n  .https.onRequest(async (req, res) => {\n    if (req.method !== \"POST\") {\n      res.status(405).send(\"Method Not Allowed\");\n      return;\n    }\n\n    const {mapId, chunkId, tiles, tile, chunkSize} = req.body || {};\n\n    if (typeof mapId !== \"string\" || mapId.trim().length === 0) {\n      res.status(400).json({error: \"mapId must be provided.\"});\n      return;\n    }\n\n    if (typeof chunkId !== \"string\" || chunkId.trim().length === 0) {\n      res.status(400).json({error: \"chunkId must be provided.\"});\n      return;\n    }\n\n    const mapDataRef = firestore.collection(\"MapData\").doc(mapId);\n    const chunkDoc = mapDataRef.collection(\"Chunks\").doc(chunkId);\n\n    let tileArray = [];\n    if (Array.isArray(tiles)) {\n      tileArray = tiles;\n    } else if (tile && typeof tile === \"object\") {\n      tileArray = [tile];\n    }\n\n    const normalizedTiles = [];\n    for (const entry of tileArray) {\n      if (!entry || typeof entry !== \"object\") {\n        continue;\n      }\n\n      const x = entry.x ?? entry.X;\n      const y = entry.y ?? entry.Y;\n      if (typeof x !== \"number\" || typeof y !== \"number\") {\n        continue;\n      }\n\n      const tileLayerValue = entry.TileLayer ?? entry.tileLayer ?? \"Surface\";\n      const tileNameValue = entry.TileName ?? entry.tileName ?? null;\n      const tileObjectPathValue = entry.TileObjectPath ?? entry.tileObjectPath ?? null;\n\n      normalizedTiles.push({\n        x,\n        y,\n        TileLayer: tileLayerValue,\n        TileName: tileNameValue,\n        TileObjectPath: tileObjectPathValue\n      });\n    }\n\n    const updateData = {\n      Tiles: normalizedTiles.length ? normalizedTiles : [],\n      updatedAt: admin.firestore.FieldValue.serverTimestamp()\n    };\n\n    if (typeof chunkSize === \"number\" && chunkSize > 0) {\n      updateData.chunkSize = chunkSize;\n    }\n\n    await chunkDoc.set(updateData, {merge: false});\n\n    functions.logger.debug(\"processMapTileTask wrote tiles\", {\n      mapId,\n      chunkId,\n      processedTiles: normalizedTiles.length\n    });\n\n    res.status(200).json({success: true, processedTiles: normalizedTiles.length});\n  });\n\nexports.health = functions.https.onCall(async () => {\n  return { status: \"ok\", time: admin.firestore.Timestamp.now().toDate().toISOString() };\n});\n"],"names":["functions","require","admin","CloudTasksClient","apps","length","initializeApp","firestore","tasksClient","MAX_BATCH_WRITES","BATCH_DELAY_MS","MAX_CHUNK_DOCS","MAX_TILES_PER_CHUNK","TASK_LOCATION","TASK_QUEUE_NAME","delay","ms","Promise","resolve","setTimeout","ensureQueue","projectId","queuePath","locationPath","desiredRateLimits","maxDispatchesPerSecond","maxConcurrentDispatches","existingQueue","getQueue","name","needsUpdate","rateLimits","updateQueue","queue","updateMask","paths","logger","info","error","code","createQueue","parent","ensureAuthenticated","context","auth","https","HttpsError","validateChunk","chunk","chunkSize","id","tiles","Tiles","trim","Array","isArray","tile","x","X","y","Y","tileName","TileName","tileObjectPath","TileObjectPath","rawLayer","tileLayer","TileLayer","commitOperationsInBatches","operations","label","batch","writesInBatch","processed","op","commit","debug","exports","saveMap","region","runWith","timeoutSeconds","memory","onCall","data","mapId","planetName","planetSurface","planetSize","tileCount","chunks","deleteMissingChunks","chunkCount","undefined","chunkIdsOverride","chunkIds","chunkIdsOverrideSet","Set","add","size","sanitizedChunks","incomingChunkIds","has","tilesArray","map","layer","push","targetChunkIdSet","chunkId","mapRef","collection","doc","mapDataRef","chunksCollection","now","FieldValue","serverTimestamp","app","options","process","env","GCLOUD_PROJECT","taskHandlerUrl","serviceAccountEmail","pendingTaskPromises","FLUSH_SIZE","tasksCreated","tilesScheduled","flushPending","reason","count","all","TILES_PER_TASK","payload","createTask","task","httpRequest","httpMethod","url","headers","body","Buffer","from","JSON","stringify","toString","oidcToken","then","start","slice","catch","err","message","shouldPerformDeletes","deleteOperations","existingChunkRefs","listDocuments","ref","delete","mapDocument","PlanetName","PlanetSurface","PlanetSize","updatedAt","mapDataDocument","ChunkSize","isFinalBatch","ChunkIds","TileCount","set","merge","chunkBatchSize","chunkIdsCount","success","processedChunkIds","finalBatch","Error","String","stack","processMapTileTask","onRequest","req","res","method","status","send","json","chunkDoc","tileArray","normalizedTiles","entry","tileLayerValue","tileNameValue","tileObjectPathValue","updateData","processedTiles","health","time","Timestamp","toDate","toISOString"],"sourceRoot":""}